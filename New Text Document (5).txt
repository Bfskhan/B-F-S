<!doctype html>
<html lang="en">
<head>
  <meta charset="utf-8" />
  <title>Playground — Free Voice Demo</title>
  <meta name="viewport" content="width=device-width,initial-scale=1" />
  <style>
    :root{
      --bg:#0b0f14; --panel:#0f1720; --muted:#9aa4b2; --accent:#6ee7b7; --glass: rgba(255,255,255,0.03);
      --card-radius:14px;
    }
    *{box-sizing:border-box}
    body{margin:0;font-family:Inter,ui-sans-serif,system-ui,-apple-system,"Segoe UI",Roboto; background:linear-gradient(180deg,#05060a 0%,#0b0f14 100%); color:#e6eef6;min-height:100vh;display:flex;align-items:center;justify-content:center;padding:28px}
    .wrap{width:100%;max-width:1040px;border-radius:16px; background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01)); box-shadow: 0 8px 30px rgba(2,6,23,0.6); padding:22px; display:grid; grid-template-columns: 1fr 360px; gap:18px;}
    header{grid-column:1/-1; display:flex; align-items:center; justify-content:space-between; gap:12px}
    .title{display:flex;flex-direction:column}
    h1{margin:0;font-size:18px;letter-spacing:0.2px}
    p.subtitle{margin:2px 0 0 0;color:var(--muted);font-size:13px}
    /* Left: Main playground */
    .main{background:var(--panel);border-radius:var(--card-radius);padding:14px;min-height:420px;display:flex;flex-direction:column;gap:12px}
    .controls{display:flex;gap:10px;align-items:center}
    textarea#txt{flex:1;min-height:260px;background:transparent;border:1px solid rgba(255,255,255,0.04);padding:12px;border-radius:10px;color:inherit;font-size:15px;resize:vertical}
    .row{display:flex;gap:10px;align-items:center}
    select,input[type=range]{background:var(--glass);border:1px solid rgba(255,255,255,0.03);padding:8px;border-radius:10px;color:inherit}
    .btn{background:linear-gradient(90deg,var(--accent),#34d399);color:#022; border:none;padding:10px 14px;border-radius:10px;cursor:pointer;font-weight:600}
    .ghost{background:transparent;border:1px solid rgba(255,255,255,0.06);padding:8px 10px;border-radius:10px;color:var(--muted);cursor:pointer}
    /* Right panel */
    .side{background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01)); border-radius:12px;padding:14px;height:100%}
    .meta{font-size:13px;color:var(--muted);margin-bottom:10px}
    .voices-list{max-height:220px;overflow:auto;border-radius:8px;padding:6px;border:1px solid rgba(255,255,255,0.03)}
    .voice-row{padding:8px;border-radius:8px;display:flex;justify-content:space-between;align-items:center;gap:8px}
    .voice-row:hover{background:rgba(255,255,255,0.01)}
    footer{grid-column:1/-1;color:var(--muted);font-size:13px;margin-top:6px;text-align:center}
  </style>
</head>
<body>
  <div class="wrap">
    <header>
      <div class="title">
        <h1>Playground — Free Voice Demo</h1>
        <p class="subtitle">Browser-based TTS demo • No signup • Free</p>
      </div>
      <div style="display:flex;gap:10px;align-items:center">
        <div style="font-size:13px;color:var(--muted)">Voices: <span id="voiceCount">0</span></div>
        <button id="downloadBtn" class="ghost">Download (if available)</button>
      </div>
    </header>

    <section class="main">
      <div style="display:flex;gap:10px">
        <select id="voiceSelect" style="min-width:260px"></select>
        <div style="flex:1;display:flex;gap:8px">
          <input id="rate" type="range" min="0.5" max="2" step="0.1" value="1" title="Rate">
          <input id="pitch" type="range" min="0.5" max="2" step="0.1" value="1" title="Pitch">
          <input id="vol" type="range" min="0" max="1" step="0.05" value="1" title="Volume">
        </div>
      </div>

      <textarea id="txt" placeholder="Type or paste your script here. Try: 'Hello from the free playground. This is a browser demo.'"></textarea>

      <div class="row" style="justify-content:space-between;margin-top:6px">
        <div style="display:flex;gap:8px">
          <button id="play" class="btn">Play ▶</button>
          <button id="stop" class="ghost">Stop ■</button>
          <button id="copy" class="ghost">Copy</button>
          <button id="clear" class="ghost">Clear</button>
        </div>
        <div style="color:var(--muted);font-size:13px">Tips: Ctrl+Enter to play • Long text may be chunked</div>
      </div>

      <div style="margin-top:8px;color:var(--muted);font-size:13px">
        <strong>Note:</strong> Browser voices differ by OS & browser. For natural commercial voices, backend + paid TTS API is needed.
      </div>
    </section>

    <aside class="side">
      <div class="meta">Available voices (click to preview):</div>
      <div class="voices-list" id="voicesList"></div>

      <hr style="border:none;height:8px">

      <div style="font-size:13px;color:var(--muted)">
        <strong>Controls</strong>
        <div style="margin-top:8px">
          <div>Rate: <span id="rateVal">1</span></div>
          <div>Pitch: <span id="pitchVal">1</span></div>
          <div>Volume: <span id="volVal">1</span></div>
        </div>
      </div>
    </aside>

    <footer>
      Built for learning — browser TTS only. Want natural voices (OpenAI/ElevenLabs)? Tell me and I'll add backend + deploy.
    </footer>
  </div>

<script>
  // Elements
  const voiceSelect = document.getElementById('voiceSelect');
  const voicesList = document.getElementById('voicesList');
  const voiceCount = document.getElementById('voiceCount');
  const txt = document.getElementById('txt');
  const rate = document.getElementById('rate');
  const pitch = document.getElementById('pitch');
  const vol = document.getElementById('vol');
  const playBtn = document.getElementById('play');
  const stopBtn = document.getElementById('stop');
  const copyBtn = document.getElementById('copy');
  const clearBtn = document.getElementById('clear');
  const downloadBtn = document.getElementById('downloadBtn');
  const rateVal = document.getElementById('rateVal');
  const pitchVal = document.getElementById('pitchVal');
  const volVal = document.getElementById('volVal');

  let voices = [];
  function loadVoices(){
    voices = speechSynthesis.getVoices().sort((a,b)=> a.name.localeCompare(b.name));
    voiceSelect.innerHTML = '';
    voicesList.innerHTML = '';
    voices.forEach((v,i)=>{
      const opt = document.createElement('option');
      opt.value = i;
      opt.textContent = `${v.name} — ${v.lang}${v.default ? ' (default)':''}`;
      voiceSelect.appendChild(opt);

      const row = document.createElement('div');
      row.className = 'voice-row';
      const left = document.createElement('div');
      left.textContent = `${v.name} (${v.lang})`;
      const btn = document.createElement('button');
      btn.className = 'ghost';
      btn.textContent = 'Preview';
      btn.onclick = ()=> previewVoice(i);
      row.appendChild(left);
      row.appendChild(btn);
      voicesList.appendChild(row);
    });
    voiceCount.textContent = voices.length;
    if(voices.length===0){
      voiceSelect.innerHTML = '<option>No voices — try Chrome/Edge (desktop)</option>';
      voicesList.innerHTML = '<div style="color:var(--muted)">No voices available.</div>';
    }
  }
  loadVoices();
  if (speechSynthesis.onvoiceschanged !== undefined) speechSynthesis.onvoiceschanged = loadVoices;

  rate.oninput = ()=> rateVal.textContent = rate.value;
  pitch.oninput = ()=> pitchVal.textContent = pitch.value;
  vol.oninput = ()=> volVal.textContent = vol.value;

  let currentUtter = null;

  function speakText(textContent){
    if(!textContent) return alert('Please enter text');
    stopSpeak();
    const u = new SpeechSynthesisUtterance(textContent);
    u.rate = parseFloat(rate.value);
    u.pitch = parseFloat(pitch.value);
    u.volume = parseFloat(vol.value);
    const idx = parseInt(voiceSelect.value);
    if(!isNaN(idx) && voices[idx]) u.voice = voices[idx];
    u.onend = ()=> {
      playBtn.textContent = 'Play ▶';
      playBtn.disabled = false;
    };
    u.onerror = (e)=> { console.error(e); alert('Speech error'); playBtn.textContent = 'Play ▶'; playBtn.disabled = false; };
    speechSynthesis.speak(u);
    currentUtter = u;
    playBtn.textContent = 'Playing...';
    playBtn.disabled = true;
  }

  function previewVoice(i){
    const v = voices[i];
    if(!v) return;
    const sample = `This is ${v.name} speaking in ${v.lang}.`;
    const u = new SpeechSynthesisUtterance(sample);
    u.voice = v; u.rate = 1; u.pitch = 1; u.volume = 1;
    speechSynthesis.speak(u);
  }

  function stopSpeak(){ if(speechSynthesis.speaking || speechSynthesis.pending) speechSynthesis.cancel(); currentUtter=null; playBtn.textContent='Play ▶'; playBtn.disabled=false; }

  playBtn.onclick = ()=> {
    speakText(txt.value.trim());
  };
  stopBtn.onclick = stopSpeak;
  copyBtn.onclick = ()=> { navigator.clipboard.writeText(txt.value).then(()=> alert('Copied to clipboard')).catch(()=> alert('Copy failed')); };
  clearBtn.onclick = ()=> txt.value='';

  // Keyboard shortcut Ctrl+Enter
  txt.addEventListener('keydown', (e)=> { if(e.ctrlKey && e.key === 'Enter') speakText(txt.value.trim()); });

  // DOWNLOAD support (best-effort): attempt to record system audio while TTS plays.
  // Note: Most browsers don't allow direct capturing of speechSynthesis output.
  let mediaRecorder, recordedChunks=[], isRecording=false;
  async function startRecordingAndSpeak(){
    // Attempt: create an oscillator routed to WebAudio + MediaRecorder — not reliable cross-browser.
    // Fallback: show message that download not supported in this browser.
    alert('Recording/download of browser TTS is not reliably supported across browsers. Use external recorder or I can add server-side TTS integration for downloadable mp3.');
  }
  downloadBtn.addEventListener('click', ()=> startRecordingAndSpeak());
</script>
</body>
</html>
